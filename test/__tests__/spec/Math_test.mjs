// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "zora";
import * as Garter_Math from "../../../src/Garter_Math.mjs";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";

function testEqual(lhs, rhs) {
  if (Primitive_object.equal(lhs, rhs)) {
    return;
  }
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "Math_test.res",
      6,
      2
    ],
    Error: new Error()
  };
}

Zora.test("average", t => {
  t.ok(Number.isNaN(Garter_Math.average_int([])), "average of no numbers");
  t.ok(Number.isNaN(Garter_Math.average_float([])), "average of no numbers");
});

Zora.test("clamp", t => {
  t.equal(Garter_Math.clamp_float(0, 0.5, 1.15), 0.5, "lower bounded");
  t.equal(Garter_Math.clamp_float(10, 0.5, 1.15), 1.15, "upper bounded");
  t.equal(Garter_Math.clamp_float(1, 0.5, 1.15), 1.0, "in bound");
  t.ok(Number.isNaN(Garter_Math.clamp_float(0, NaN, 1.15)), "");
  t.ok(Number.isNaN(Garter_Math.clamp_float(0, NaN, NaN)), "");
  t.ok(Number.isNaN(Garter_Math.clamp_float(NaN, 0.5, 1.15)), "");
});

export {
  testEqual,
}
/*  Not a pure module */
