// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "zora";
import * as Js_dict from "rescript/lib/es6/Js_dict.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Garter_Object from "../../../src/Garter_Object.mjs";

function testEqual(t, name, lhs, rhs) {
  t.test(name, async t => {
    t.equal(lhs, rhs, name);
  });
}

Zora.test("fromKV", t => testEqual(t, "1", Garter_Object.fromKV("a", 1), {
  a: 1
}));

function roundtrip(o) {
  return Belt_Option.map(JSON.stringify(o), prim => JSON.parse(prim));
}

Zora.test("toJsonUnsafe", t => {
  t.test("safe", async t => {
    t.equal(Garter_Object.toJsonUnsafe({
      x: 0
    }), Js_dict.fromArray([[
        "x",
        0.0
      ]]), "dict");
  });
  t.test("unsafe", async t => {
    let o = {
      x: () => 1
    };
    t.notEqual(Garter_Object.toJsonUnsafe(o), roundtrip(o), "function");
  });
});

Zora.test("[Object] toJsonExn", t => {
  t.test("dict", async t => {
    t.equal(Garter_Object.toJsonExn({
      x: 0
    }), Js_dict.fromArray([[
        "x",
        0.0
      ]]), "");
  });
  t.test("roundtrip", async t => {
    let o = {
      x: () => 1
    };
    t.equal(Garter_Object.toJsonExn(o), roundtrip(o), "roundtrip");
  });
});

Zora.test("[Object] toJson", t => {
  t.test("dict", async t => {
    t.equal(Garter_Object.toJson({
      x: 0
    }), Js_dict.fromArray([[
        "x",
        0.0
      ]]), "");
  });
  t.test("roundtrip", async t => {
    let o = {
      x: () => 1
    };
    t.equal(Garter_Object.toJson(o), roundtrip(o), "roundtrip");
  });
});

export {
  testEqual,
  roundtrip,
}
/*  Not a pure module */
