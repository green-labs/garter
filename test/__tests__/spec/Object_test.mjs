// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "zora";
import * as Js_dict from "@rescript/std/lib/es6/js_dict.js";
import * as Belt_Option from "@rescript/std/lib/es6/belt_Option.js";
import * as Garter_Object from "../../../src/Garter_Object.mjs";

function testEqual(t, name, lhs, rhs) {
  t.test(name, (async function (t) {
          t.equal(lhs, rhs, name);
        }));
}

Zora.test("fromKV", (function (t) {
        testEqual(t, "1", Garter_Object.fromKV("a", 1), {
              a: 1
            });
      }));

function roundtrip(o) {
  return Belt_Option.map(JSON.stringify(o), (function (prim) {
                return JSON.parse(prim);
              }));
}

Zora.test("toJsonUnsafe", (function (t) {
        t.test("safe", (async function (t) {
                t.equal(Garter_Object.toJsonUnsafe({
                          x: 0
                        }), Js_dict.fromArray([[
                            "x",
                            0.0
                          ]]), "dict");
              }));
        t.test("unsafe", (async function (t) {
                var o = {
                  x: (function () {
                      return 1;
                    })
                };
                t.notEqual(Garter_Object.toJsonUnsafe(o), roundtrip(o), "function");
              }));
      }));

Zora.test("[Object] toJsonExn", (function (t) {
        t.test("dict", (async function (t) {
                t.equal(Garter_Object.toJsonExn({
                          x: 0
                        }), Js_dict.fromArray([[
                            "x",
                            0.0
                          ]]), "");
              }));
        t.test("roundtrip", (async function (t) {
                var o = {
                  x: (function () {
                      return 1;
                    })
                };
                t.equal(Garter_Object.toJsonExn(o), roundtrip(o), "roundtrip");
              }));
      }));

Zora.test("[Object] toJson", (function (t) {
        t.test("dict", (async function (t) {
                t.equal(Garter_Object.toJson({
                          x: 0
                        }), Js_dict.fromArray([[
                            "x",
                            0.0
                          ]]), "");
              }));
        t.test("roundtrip", (async function (t) {
                var o = {
                  x: (function () {
                      return 1;
                    })
                };
                t.equal(Garter_Object.toJson(o), roundtrip(o), "roundtrip");
              }));
      }));

export {
  testEqual ,
  roundtrip ,
}
/*  Not a pure module */
