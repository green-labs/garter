// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "zora";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Garter_Array from "../../../src/Garter_Array.mjs";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";

function testEqual(t, name, lhs, rhs) {
  t.test(name, async t => {
    t.equal(lhs, rhs, name);
  });
}

let emptyArray = Garter_Array.NonEmpty.fromArray([]);

let nonEmptyArray = Garter_Array.NonEmpty.fromArrayExn([
  1,
  2,
  3,
  4,
  5
]);

Zora.test("fromArray", t => testEqual(t, "Empty", Garter_Array.NonEmpty.fromArray([]), undefined));

Zora.test("toArray", t => {
  testEqual(t, "Empty", Belt_Option.map(emptyArray, Garter_Array.NonEmpty.toArray), undefined);
  testEqual(t, "NonEmpty", Garter_Array.NonEmpty.toArray(nonEmptyArray), [
    1,
    2,
    3,
    4,
    5
  ]);
});

Zora.test("first", t => {
  testEqual(t, "Empty", Belt_Option.map(emptyArray, Garter_Array.NonEmpty.first), undefined);
  testEqual(t, "NonEmpty", Garter_Array.NonEmpty.first(nonEmptyArray), 1);
});

Zora.test("last", t => {
  testEqual(t, "Empty", Belt_Option.map(emptyArray, Garter_Array.NonEmpty.last), undefined);
  testEqual(t, "NonEmpty", Garter_Array.NonEmpty.last(nonEmptyArray), 5);
});

Zora.test("take", t => {
  testEqual(t, "1", Garter_Array.NonEmpty.take(nonEmptyArray, -1), []);
  testEqual(t, "2", Garter_Array.NonEmpty.take(nonEmptyArray, 2), [
    1,
    2
  ]);
  testEqual(t, "3", Garter_Array.NonEmpty.take(nonEmptyArray, 7), [
    1,
    2,
    3,
    4,
    5
  ]);
});

Zora.test("reduce1", t => testEqual(t, "", Garter_Array.NonEmpty.reduce1(Garter_Array.NonEmpty.fromArrayExn(Garter_Array.range(1, 10)), (prim0, prim1) => prim0 + prim1 | 0), 55));

Zora.test("minBy", t => testEqual(t, "1", Garter_Array.NonEmpty.minBy(Garter_Array.NonEmpty.fromArrayExn([
  1,
  2,
  3,
  4,
  5
]), Primitive_int.compare), 1));

Zora.test("maxBy", t => testEqual(t, "1", Garter_Array.NonEmpty.maxBy(Garter_Array.NonEmpty.fromArrayExn([
  1,
  2,
  3,
  4,
  5
]), Primitive_int.compare), 5));

Zora.test("concatMany", t => {
  let nonEmptyArrayArray = Garter_Array.NonEmpty.fromArrayExn([
    nonEmptyArray,
    nonEmptyArray
  ]);
  testEqual(t, "1", Garter_Array.NonEmpty.concatMany(nonEmptyArrayArray), Garter_Array.NonEmpty.fromArrayExn([
    1,
    2,
    3,
    4,
    5,
    1,
    2,
    3,
    4,
    5
  ]));
});

export {
  testEqual,
  emptyArray,
  nonEmptyArray,
}
/* emptyArray Not a pure module */
