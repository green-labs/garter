// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "@rescript/std/lib/es6/caml.js";
import * as Zora from "zora";
import * as Belt_Option from "@rescript/std/lib/es6/belt_Option.js";
import * as Garter_Array from "../../../src/Garter_Array.mjs";

function testEqual(t, name, lhs, rhs) {
  t.test(name, (async function (t) {
          t.equal(lhs, rhs, name);
        }));
}

var emptyArray = Garter_Array.NonEmpty.fromArray([]);

var nonEmptyArray = Garter_Array.NonEmpty.fromArrayExn([
      1,
      2,
      3,
      4,
      5
    ]);

Zora.test("fromArray", (function (t) {
        testEqual(t, "Empty", Garter_Array.NonEmpty.fromArray([]), undefined);
      }));

Zora.test("toArray", (function (t) {
        testEqual(t, "Empty", Belt_Option.map(emptyArray, Garter_Array.NonEmpty.toArray), undefined);
        testEqual(t, "NonEmpty", Garter_Array.NonEmpty.toArray(nonEmptyArray), [
              1,
              2,
              3,
              4,
              5
            ]);
      }));

Zora.test("first", (function (t) {
        testEqual(t, "Empty", Belt_Option.map(emptyArray, Garter_Array.NonEmpty.first), undefined);
        testEqual(t, "NonEmpty", Garter_Array.NonEmpty.first(nonEmptyArray), 1);
      }));

Zora.test("last", (function (t) {
        testEqual(t, "Empty", Belt_Option.map(emptyArray, Garter_Array.NonEmpty.last), undefined);
        testEqual(t, "NonEmpty", Garter_Array.NonEmpty.last(nonEmptyArray), 5);
      }));

Zora.test("take", (function (t) {
        testEqual(t, "1", Garter_Array.NonEmpty.take(nonEmptyArray, -1), []);
        testEqual(t, "2", Garter_Array.NonEmpty.take(nonEmptyArray, 2), [
              1,
              2
            ]);
        testEqual(t, "3", Garter_Array.NonEmpty.take(nonEmptyArray, 7), [
              1,
              2,
              3,
              4,
              5
            ]);
      }));

Zora.test("reduce1", (function (t) {
        testEqual(t, "", Garter_Array.NonEmpty.reduce1(Garter_Array.NonEmpty.fromArrayExn(Garter_Array.range(1, 10)), (function (prim0, prim1) {
                    return prim0 + prim1 | 0;
                  })), 55);
      }));

Zora.test("minBy", (function (t) {
        testEqual(t, "1", Garter_Array.NonEmpty.minBy(Garter_Array.NonEmpty.fromArrayExn([
                      1,
                      2,
                      3,
                      4,
                      5
                    ]), Caml.int_compare), 1);
      }));

Zora.test("maxBy", (function (t) {
        testEqual(t, "1", Garter_Array.NonEmpty.maxBy(Garter_Array.NonEmpty.fromArrayExn([
                      1,
                      2,
                      3,
                      4,
                      5
                    ]), Caml.int_compare), 5);
      }));

Zora.test("concatMany", (function (t) {
        var nonEmptyArrayArray = Garter_Array.NonEmpty.fromArrayExn([
              nonEmptyArray,
              nonEmptyArray
            ]);
        testEqual(t, "1", Garter_Array.NonEmpty.concatMany(nonEmptyArrayArray), Garter_Array.NonEmpty.fromArrayExn([
                  1,
                  2,
                  3,
                  4,
                  5,
                  1,
                  2,
                  3,
                  4,
                  5
                ]));
      }));

export {
  testEqual ,
  emptyArray ,
  nonEmptyArray ,
}
/* emptyArray Not a pure module */
