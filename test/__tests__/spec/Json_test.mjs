// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "zora";
import * as Js_dict from "rescript/lib/es6/Js_dict.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Garter_Json from "../../../src/Garter_Json.mjs";

function testEqual(t, name, lhs, rhs) {
  t.test(name, async t => {
    t.equal(lhs, rhs, name);
  });
}

Zora.test("[Json] stringifyExn", t => {
  t.test("object", async t => {
    t.equal(Garter_Json.stringifyExn({
      x: 0
    }), "{\"x\":0}", "");
  });
  t.test("undefined", async t => {
    t.equal(Garter_Json.stringifyExn(undefined), undefined, "");
  });
});

Zora.test("[Json] stringify", t => {
  t.test("object", async t => {
    t.equal(Garter_Json.stringify({
      x: 0
    }), "{\"x\":0}", "");
  });
  t.test("undefined", async t => {
    t.equal(Garter_Json.stringify(undefined), undefined, "");
  });
});

Zora.test("[Json] parse", t => {
  t.test("object", async t => {
    t.equal(Belt_Option.flatMap(Garter_Json.stringify({
      x: 0
    }), Garter_Json.parse), Js_dict.fromArray([[
        "x",
        0.0
      ]]), "");
  });
  t.test("undefined", async t => {
    t.equal(Garter_Json.parse(undefined), undefined, "");
  });
});

function roundtrip(json) {
  return Belt_Option.flatMap(Garter_Json.stringify(json), Garter_Json.parse);
}

Zora.test("[Json] roundtrip", t => {
  t.test("json", async t => {
    let json = Js_dict.fromArray([[
        "x",
        0.0
      ]]);
    t.equal(Belt_Option.flatMap(Garter_Json.stringify(json), Garter_Json.parse), json, "");
  });
});

export {
  testEqual,
  roundtrip,
}
/*  Not a pure module */
