// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "@rescript/std/lib/es6/caml.js";
import * as Jest from "@glennsl/bs-jest/src/jest.mjs";
import * as Garter_Fn from "../../src/Garter_Fn.mjs";
import * as Garter_Array from "../../src/Garter_Array.mjs";

function testEqual(name, lhs, rhs) {
  return Jest.test(name, (function (param) {
                return Jest.Expect.toEqual(rhs, Jest.Expect.expect(lhs));
              }));
}

Jest.describe("take", (function (param) {
        testEqual("1", Garter_Array.take([
                  1,
                  2,
                  3,
                  4,
                  5
                ], -1), []);
        testEqual("2", Garter_Array.take([
                  1,
                  2,
                  3,
                  4,
                  5
                ], 2), [
              1,
              2
            ]);
        return testEqual("3", Garter_Array.take([
                        1,
                        2,
                        3,
                        4,
                        5
                      ], 7), [
                    1,
                    2,
                    3,
                    4,
                    5
                  ]);
      }));

Jest.describe("drop", (function (param) {
        testEqual("1", Garter_Array.drop([
                  1,
                  2,
                  3,
                  4,
                  5
                ], -1), [
              1,
              2,
              3,
              4,
              5
            ]);
        testEqual("2", Garter_Array.drop([
                  1,
                  2,
                  3,
                  4,
                  5
                ], 2), [
              3,
              4,
              5
            ]);
        return testEqual("3", Garter_Array.drop([
                        1,
                        2,
                        3,
                        4,
                        5
                      ], 7), []);
      }));

Jest.describe("takeWhile", (function (param) {
        testEqual("1", Garter_Array.takeWhile([
                  1,
                  2,
                  3,
                  4,
                  5
                ], (function (x) {
                    return x <= 2;
                  })), [
              1,
              2
            ]);
        return testEqual("2", Garter_Array.takeWhile([
                        1,
                        2,
                        3,
                        4,
                        5
                      ], (function (param) {
                          return Garter_Fn.constantly(false, param);
                        })), []);
      }));

Jest.describe("dropWhile", (function (param) {
        testEqual("1", Garter_Array.dropWhile([
                  1,
                  2,
                  3,
                  4,
                  5
                ], (function (x) {
                    return x <= 2;
                  })), [
              3,
              4,
              5
            ]);
        return testEqual("2", Garter_Array.dropWhile([
                        1,
                        2,
                        3,
                        4,
                        5
                      ], (function (param) {
                          return Garter_Fn.constantly(true, param);
                        })), []);
      }));

Jest.describe("keepSome", (function (param) {
        return testEqual("1", Garter_Array.keepSome([
                        1,
                        undefined,
                        3
                      ]), [
                    1,
                    3
                  ]);
      }));

Jest.describe("reduce1", (function (param) {
        return testEqual("", Garter_Array.reduce1(Garter_Array.range(1, 10), (function (prim0, prim1) {
                          return prim0 + prim1 | 0;
                        })), 55);
      }));

Jest.describe("minBy", (function (param) {
        testEqual("1", Garter_Array.minBy([
                  1,
                  2,
                  3,
                  4,
                  5
                ], Caml.caml_int_compare), 1);
        return testEqual("2", Garter_Array.minByU([
                        1,
                        2,
                        3,
                        4,
                        5
                      ], Caml.caml_int_compare), 1);
      }));

Jest.describe("maxBy", (function (param) {
        testEqual("1", Garter_Array.maxBy([
                  1,
                  2,
                  3,
                  4,
                  5
                ], Caml.caml_int_compare), 5);
        return testEqual("2", Garter_Array.maxByU([
                        1,
                        2,
                        3,
                        4,
                        5
                      ], Caml.caml_int_compare), 5);
      }));

Jest.describe("intersperse", (function (param) {
        testEqual("1", Garter_Array.intersperse([], 0), []);
        testEqual("2", Garter_Array.intersperse([1], 0), [1]);
        testEqual("3", Garter_Array.intersperse([
                  1,
                  2
                ], 0), [
              1,
              0,
              2
            ]);
        return testEqual("4", Garter_Array.intersperse([
                        1,
                        2,
                        3
                      ], 0), [
                    1,
                    0,
                    2,
                    0,
                    3
                  ]);
      }));

export {
  testEqual ,
  
}
/*  Not a pure module */
